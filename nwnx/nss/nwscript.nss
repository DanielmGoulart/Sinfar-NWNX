#include "nwscript_consts"
int Random(int nMaxInteger);
void PrintString(string sString);
void PrintFloat(float fFloat, int nWidth=18, int nDecimals=9);
string FloatToString(float fFloat, int nWidth=18, int nDecimals=9);
void PrintInteger(int nInteger);
void PrintObject(object oObject);
void AssignCommand(object oActionSubject,action aActionToAssign);
void DelayCommand(float fSeconds, action aActionToDelay);
void ExecuteScript(string sScript, object oTarget);
void ClearAllActions(int nClearCombatState=FALSE);
void SetFacing(float fDirection);
void SetCalendar(int nYear,int nMonth, int nDay);
void SetTime(int nHour,int nMinute,int nSecond,int nMillisecond);
int GetCalendarYear();
int GetCalendarMonth();
int GetCalendarDay();
int GetTimeHour();
int GetTimeMinute();
int GetTimeSecond();
int GetTimeMillisecond();
void ActionRandomWalk();
void ActionMoveToLocation(location lDestination, int bRun=FALSE);
void ActionMoveToObject(object oMoveTo, int bRun=FALSE, float fRange=1.0f);
void ActionMoveAwayFromObject(object oFleeFrom, int bRun=FALSE, float fMoveAwayRange=40.0f);
object GetArea(object oTarget);
object GetEnteringObject();
object GetExitingObject();
vector GetPosition(object oTarget);
float GetFacing(object oTarget);
object GetItemPossessor(object oItem);
object GetItemPossessedBy(object oCreature, string sItemTag);
object CreateItemOnObject(string sItemTemplate, object oTarget=OBJECT_SELF, int nStackSize=1, string sNewTag="");
void ActionEquipItem(object oItem, int nInventorySlot);
void ActionUnequipItem(object oItem);
void ActionPickUpItem(object oItem);
void ActionPutDownItem(object oItem);
object GetLastAttacker(object oAttackee=OBJECT_SELF);
void ActionAttack(object oAttackee, int bPassive=FALSE);
object GetNearestCreature(int nFirstCriteriaType, int nFirstCriteriaValue, object oTarget=OBJECT_SELF, int nNth=1, int nSecondCriteriaType=-1, int nSecondCriteriaValue=-1, int nThirdCriteriaType=-1, int nThirdCriteriaValue=-1 );
void ActionSpeakString(string sStringToSpeak, int nTalkVolume=TALKVOLUME_TALK);
void ActionPlayAnimation(int nAnimation, float fSpeed=1.0, float fDurationSeconds=0.0);
float GetDistanceToObject(object oObject);
int GetIsObjectValid(object oObject);
void ActionOpenDoor(object oDoor);
void ActionCloseDoor(object oDoor);
void SetCameraFacing(float fDirection, float fDistance=-1.0f, float fPitch=-1.0, int nTransitionType=CAMERA_TRANSITION_TYPE_SNAP);
void PlaySound(string sSoundName);
object GetSpellTargetObject();
void ActionCastSpellAtObject(int nSpell, object oTarget, int nMetaMagic=METAMAGIC_ANY, int bCheat=FALSE, int nDomainLevel=0, int nProjectilePathType=PROJECTILE_PATH_TYPE_DEFAULT, int bInstantSpell=FALSE);
int GetCurrentHitPoints(object oObject=OBJECT_SELF);
int GetMaxHitPoints(object oObject=OBJECT_SELF);
int GetLocalInt(object oObject, string sVarName);
float GetLocalFloat(object oObject, string sVarName);
string GetLocalString(object oObject, string sVarName);
object GetLocalObject(object oObject, string sVarName);
void SetLocalInt(object oObject, string sVarName, int nValue);
void SetLocalFloat(object oObject, string sVarName, float fValue);
void SetLocalString(object oObject, string sVarName, string sValue);
void SetLocalObject(object oObject, string sVarName, object oValue);
int GetStringLength(string sString);
string GetStringUpperCase(string sString);
string GetStringLowerCase(string sString);
string GetStringRight(string sString, int nCount);
string GetStringLeft(string sString, int nCount);
string InsertString(string sDestination, string sString, int nPosition);
string GetSubString(string sString, int nStart, int nCount=2147483647);
int FindSubString(string sString, string sSubString, int nStart=0);
float fabs(float fValue);
float cos(float fValue);
float sin(float fValue);
float tan(float fValue);
float acos(float fValue);
float asin(float fValue);
float atan(float fValue);
float log(float fValue);
float pow(float fValue, float fExponent);
float sqrt(float fValue);
int abs(int nValue);
effect EffectHeal(int nDamageToHeal);
effect EffectDamage(int nDamageAmount, int nDamageType=DAMAGE_TYPE_MAGICAL, int nDamagePower=DAMAGE_POWER_NORMAL);
effect EffectAbilityIncrease(int nAbilityToIncrease, int nModifyBy);
effect EffectDamageResistance(int nDamageType, int nAmount, int nLimit=0);
effect EffectResurrection();
effect EffectSummonCreature(string sCreatureResref, int nVisualEffectId=VFX_NONE, float fDelaySeconds=0.0f, int nUseAppearAnimation=0);
int GetCasterLevel(object oCreature);
effect GetFirstEffect(object oCreature);
effect GetNextEffect(object oCreature);
void RemoveEffect(object oCreature, effect eEffect);
int GetIsEffectValid(effect eEffect);
int GetEffectDurationType(effect eEffect);
int GetEffectSubType(effect eEffect);
object GetEffectCreator(effect eEffect);
string IntToString(int nInteger);
object GetFirstObjectInArea(object oArea=OBJECT_INVALID);
object GetNextObjectInArea(object oArea=OBJECT_INVALID);
int d2(int nNumDice=1);
int d3(int nNumDice=1);
int d4(int nNumDice=1);
int d6(int nNumDice=1);
int d8(int nNumDice=1);
int d10(int nNumDice=1);
int d12(int nNumDice=1);
int d20(int nNumDice=1);
int d100(int nNumDice=1);
float VectorMagnitude(vector vVector);
int GetMetaMagicFeat();
int GetObjectType(object oTarget);
int GetRacialType(object oCreature);
int FortitudeSave(object oCreature, int nDC, int nSaveType=SAVING_THROW_TYPE_NONE, object oSaveVersus=OBJECT_SELF);
int ReflexSave(object oCreature, int nDC, int nSaveType=SAVING_THROW_TYPE_NONE, object oSaveVersus=OBJECT_SELF);
int WillSave(object oCreature, int nDC, int nSaveType=SAVING_THROW_TYPE_NONE, object oSaveVersus=OBJECT_SELF);
int GetSpellSaveDC();
effect MagicalEffect(effect eEffect);
effect SupernaturalEffect(effect eEffect);
effect ExtraordinaryEffect(effect eEffect);
effect EffectACIncrease(int nValue, int nModifyType=AC_DODGE_BONUS, int nDamageType=AC_VS_DAMAGE_TYPE_ALL);
int GetAC(object oObject, int nForFutureUse=0);
effect EffectSavingThrowIncrease(int nSave, int nValue, int nSaveType=SAVING_THROW_TYPE_ALL);
effect EffectAttackIncrease(int nBonus, int nModifierType=ATTACK_BONUS_MISC);
effect EffectDamageReduction(int nAmount, int nDamagePower, int nLimit=0);
effect EffectDamageIncrease(int nBonus, int nDamageType=DAMAGE_TYPE_MAGICAL);
float RoundsToSeconds(int nRounds);
float HoursToSeconds(int nHours);
float TurnsToSeconds(int nTurns);
int GetLawChaosValue(object oCreature);
int GetGoodEvilValue(object oCreature);
int GetAlignmentLawChaos(object oCreature);
int GetAlignmentGoodEvil(object oCreature);
object GetFirstObjectInShape(int nShape, float fSize, location lTarget, int bLineOfSight=FALSE, int nObjectFilter=OBJECT_TYPE_CREATURE, vector vOrigin=[0.0,0.0,0.0]);
object GetNextObjectInShape(int nShape, float fSize, location lTarget, int bLineOfSight=FALSE, int nObjectFilter=OBJECT_TYPE_CREATURE, vector vOrigin=[0.0,0.0,0.0]);
effect EffectEntangle();
void SignalEvent(object oObject, event evToRun);
event EventUserDefined(int nUserDefinedEventNumber);
effect EffectDeath(int nSpectacularDeath=FALSE, int nDisplayFeedback=TRUE);
effect EffectKnockdown();
void ActionGiveItem(object oItem, object oGiveTo);
void ActionTakeItem(object oItem, object oTakeFrom);
vector VectorNormalize(vector vVector);
effect EffectCurse(int nStrMod=1, int nDexMod=1, int nConMod=1, int nIntMod=1, int nWisMod=1, int nChaMod=1);
int GetAbilityScore(object oCreature, int nAbilityType, int nBaseAbilityScore=FALSE);
int GetIsDead(object oCreature);
void PrintVector(vector vVector, int bPrepend);
vector Vector(float x=0.0f, float y=0.0f, float z=0.0f);
void SetFacingPoint(vector vTarget);
vector AngleToVector(float fAngle);
float VectorToAngle(vector vVector);
int TouchAttackMelee(object oTarget, int bDisplayFeedback=TRUE);
int TouchAttackRanged(object oTarget, int bDisplayFeedback=TRUE);
effect EffectParalyze();
effect EffectSpellImmunity(int nImmunityToSpell=SPELL_ALL_SPELLS);
effect EffectDeaf();
float GetDistanceBetween(object oObjectA, object oObjectB);
void SetLocalLocation(object oObject, string sVarName, location lValue);
location GetLocalLocation(object oObject, string sVarName);
effect EffectSleep();
object GetItemInSlot(int nInventorySlot, object oCreature=OBJECT_SELF);
effect EffectCharmed();
effect EffectConfused();
effect EffectFrightened();
effect EffectDominated();
effect EffectDazed();
effect EffectStunned();
void SetCommandable(int bCommandable, object oTarget=OBJECT_SELF);
int GetCommandable(object oTarget=OBJECT_SELF);
effect EffectRegenerate(int nAmount, float fIntervalSeconds);
effect EffectMovementSpeedIncrease(int nPercentChange);
int GetHitDice(object oCreature);
void ActionForceFollowObject(object oFollow, float fFollowDistance=0.0f);
string GetTag(object oObject);
int ResistSpell(object oCaster, object oTarget);
int GetEffectType(effect eEffect);
effect EffectAreaOfEffect(int nAreaEffectId, string sOnEnterScript="", string sHeartbeatScript="", string sOnExitScript="");
int GetFactionEqual(object oFirstObject, object oSecondObject=OBJECT_SELF);
void ChangeFaction(object oObjectToChangeFaction, object oMemberOfFactionToJoin);
int GetIsListening(object oObject);
void SetListening(object oObject, int bValue);
void SetListenPattern(object oObject, string sPattern, int nNumber=0);
int TestStringAgainstPattern(string sPattern, string sStringToTest);
string GetMatchedSubstring(int nString);
int GetMatchedSubstringsCount();
effect EffectVisualEffect(int nVisualEffectId, int nMissEffect=FALSE);
object GetFactionWeakestMember(object oFactionMember=OBJECT_SELF, int bMustBeVisible=TRUE);
object GetFactionStrongestMember(object oFactionMember=OBJECT_SELF, int bMustBeVisible=TRUE);
object GetFactionMostDamagedMember(object oFactionMember=OBJECT_SELF, int bMustBeVisible=TRUE);
object GetFactionLeastDamagedMember(object oFactionMember=OBJECT_SELF, int bMustBeVisible=TRUE);
int GetFactionGold(object oFactionMember);
int GetFactionAverageReputation(object oSourceFactionMember, object oTarget);
int GetFactionAverageGoodEvilAlignment(object oFactionMember);
int GetFactionAverageLawChaosAlignment(object oFactionMember);
int GetFactionAverageLevel(object oFactionMember);
int GetFactionAverageXP(object oFactionMember);
int GetFactionMostFrequentClass(object oFactionMember);
object GetFactionWorstAC(object oFactionMember=OBJECT_SELF, int bMustBeVisible=TRUE);
object GetFactionBestAC(object oFactionMember=OBJECT_SELF, int bMustBeVisible=TRUE);
void ActionSit(object oChair);
int GetListenPatternNumber();
void ActionJumpToObject(object oToJumpTo, int bWalkStraightLineToPoint=TRUE);
object GetWaypointByTag(string sWaypointTag);
object GetTransitionTarget(object oTransition);
effect EffectLinkEffects(effect eChildEffect, effect eParentEffect );
object GetObjectByTag(string sTag, int nNth=0);
void AdjustAlignment(object oSubject, int nAlignment, int nShift, int bAllPartyMembers=TRUE);
void ActionWait(float fSeconds);
void SetAreaTransitionBMP(int nPredefinedAreaTransition, string sCustomAreaTransitionBMP="");
void ActionStartConversation(object oObjectToConverseWith, string sDialogResRef="", int bPrivateConversation=FALSE, int bPlayHello=TRUE);
void ActionPauseConversation();
void ActionResumeConversation();
effect EffectBeam(int nBeamVisualEffect, object oEffector, int nBodyPart, int bMissEffect=FALSE);
int GetReputation(object oSource, object oTarget);
void AdjustReputation(object oTarget, object oSourceFactionMember, int nAdjustment);
object GetSittingCreature(object oChair);
object GetGoingToBeAttackedBy(object oTarget);
effect EffectSpellResistanceIncrease(int nValue);
location GetLocation(object oObject);
void ActionJumpToLocation(location lLocation);
location Location(object oArea, vector vPosition, float fOrientation);
void ApplyEffectAtLocation(int nDurationType, effect eEffect, location lLocation, float fDuration=0.0f);
int GetIsPC(object oCreature);
float FeetToMeters(float fFeet);
float YardsToMeters(float fYards);
void ApplyEffectToObject(int nDurationType, effect eEffect, object oTarget, float fDuration=0.0f);
void SpeakString(string sStringToSpeak, int nTalkVolume=TALKVOLUME_TALK);
location GetSpellTargetLocation();
vector GetPositionFromLocation(location lLocation);
object GetAreaFromLocation(location lLocation);
float GetFacingFromLocation(location lLocation);
object GetNearestCreatureToLocation(int nFirstCriteriaType, int nFirstCriteriaValue, location lLocation, int nNth=1, int nSecondCriteriaType=-1, int nSecondCriteriaValue=-1, int nThirdCriteriaType=-1, int nThirdCriteriaValue=-1 );
object GetNearestObject(int nObjectType=OBJECT_TYPE_ALL, object oTarget=OBJECT_SELF, int nNth=1);
object GetNearestObjectToLocation(int nObjectType, location lLocation, int nNth=1);
object GetNearestObjectByTag(string sTag, object oTarget=OBJECT_SELF, int nNth=1);
float IntToFloat(int nInteger);
int FloatToInt(float fFloat);
int StringToInt(string sNumber);
float StringToFloat(string sNumber);
void ActionCastSpellAtLocation(int nSpell, location lTargetLocation, int nMetaMagic=METAMAGIC_ANY, int bCheat=FALSE, int nProjectilePathType=PROJECTILE_PATH_TYPE_DEFAULT, int bInstantSpell=FALSE);
int GetIsEnemy(object oTarget, object oSource=OBJECT_SELF);
int GetIsFriend(object oTarget, object oSource=OBJECT_SELF);
int GetIsNeutral(object oTarget, object oSource=OBJECT_SELF);
object GetPCSpeaker();
string GetStringByStrRef(int nStrRef, int nGender=GENDER_MALE);
void ActionSpeakStringByStrRef(int nStrRef, int nTalkVolume=TALKVOLUME_TALK);
void DestroyObject(object oDestroy, float fDelay=0.0f);
object GetModule();
object CreateObject(int nObjectType, string sTemplate, location lLocation, int bUseAppearAnimation=FALSE, string sNewTag="");
event EventSpellCastAt(object oCaster, int nSpell, int bHarmful=TRUE);
object GetLastSpellCaster();
int GetLastSpell();
int GetUserDefinedEventNumber();
int GetSpellId();
string RandomName(int nNameType=NAME_FIRST_GENERIC_MALE);
effect EffectPoison(int nPoisonType);
effect EffectDisease(int nDiseaseType);
effect EffectSilence();
string GetName(object oObject, int bOriginalName=FALSE);
object GetLastSpeaker();
int BeginConversation(string sResRef="", object oObjectToDialog=OBJECT_INVALID);
object GetLastPerceived();
int GetLastPerceptionHeard();
int GetLastPerceptionInaudible();
int GetLastPerceptionSeen();
object GetLastClosedBy();
int GetLastPerceptionVanished();
object GetFirstInPersistentObject(object oPersistentObject=OBJECT_SELF, int nResidentObjectType=OBJECT_TYPE_CREATURE, int nPersistentZone=PERSISTENT_ZONE_ACTIVE);
object GetNextInPersistentObject(object oPersistentObject=OBJECT_SELF, int nResidentObjectType=OBJECT_TYPE_CREATURE, int nPersistentZone=PERSISTENT_ZONE_ACTIVE);
object GetAreaOfEffectCreator(object oAreaOfEffectObject=OBJECT_SELF);
void DeleteLocalInt(object oObject, string sVarName);
void DeleteLocalFloat(object oObject, string sVarName);
void DeleteLocalString(object oObject, string sVarName);
void DeleteLocalObject(object oObject, string sVarName);
void DeleteLocalLocation(object oObject, string sVarName);
effect EffectHaste();
effect EffectSlow();
string ObjectToString(object oObject);
effect EffectImmunity(int nImmunityType);
int GetIsImmune(object oCreature, int nImmunityType, object oVersus=OBJECT_INVALID);
effect EffectDamageImmunityIncrease(int nDamageType, int nPercentImmunity);
int GetEncounterActive(object oEncounter=OBJECT_SELF);
void SetEncounterActive(int nNewValue, object oEncounter=OBJECT_SELF);
int GetEncounterSpawnsMax(object oEncounter=OBJECT_SELF);
void SetEncounterSpawnsMax(int nNewValue, object oEncounter=OBJECT_SELF);
int GetEncounterSpawnsCurrent(object oEncounter=OBJECT_SELF);
void SetEncounterSpawnsCurrent(int nNewValue, object oEncounter=OBJECT_SELF);
object GetModuleItemAcquired();
object GetModuleItemAcquiredFrom();
void SetCustomToken(int nCustomTokenNumber, string sTokenValue);
int GetHasFeat(int nFeat, object oCreature=OBJECT_SELF);
int GetHasSkill(int nSkill, object oCreature=OBJECT_SELF);
void ActionUseFeat(int nFeat, object oTarget);
void ActionUseSkill(int nSkill, object oTarget, int nSubSkill=0, object oItemUsed=OBJECT_INVALID );
int GetObjectSeen(object oTarget, object oSource=OBJECT_SELF);
int GetObjectHeard(object oTarget, object oSource=OBJECT_SELF);
object GetLastPlayerDied();
object GetModuleItemLost();
object GetModuleItemLostBy();
void ActionDoCommand(action aActionToDo);
event EventConversation();
void SetEncounterDifficulty(int nEncounterDifficulty, object oEncounter=OBJECT_SELF);
int GetEncounterDifficulty(object oEncounter=OBJECT_SELF);
float GetDistanceBetweenLocations(location lLocationA, location lLocationB);
int GetReflexAdjustedDamage(int nDamage, object oTarget, int nDC, int nSaveType=SAVING_THROW_TYPE_NONE, object oSaveVersus=OBJECT_SELF);
void PlayAnimation(int nAnimation, float fSpeed=1.0, float fSeconds=0.0);
talent TalentSpell(int nSpell);
talent TalentFeat(int nFeat);
talent TalentSkill(int nSkill);
int GetHasSpellEffect(int nSpell, object oObject=OBJECT_SELF);
int GetEffectSpellId(effect eSpellEffect);
int GetCreatureHasTalent(talent tTalent, object oCreature=OBJECT_SELF);
talent GetCreatureTalentRandom(int nCategory, object oCreature=OBJECT_SELF);
talent GetCreatureTalentBest(int nCategory, int nCRMax, object oCreature=OBJECT_SELF);
void ActionUseTalentOnObject(talent tChosenTalent, object oTarget);
void ActionUseTalentAtLocation(talent tChosenTalent, location lTargetLocation);
int GetGoldPieceValue(object oItem);
int GetIsPlayableRacialType(object oCreature);
void JumpToLocation(location lDestination);
effect EffectTemporaryHitpoints(int nHitPoints);
int GetSkillRank(int nSkill, object oTarget=OBJECT_SELF, int nBaseSkillRank=FALSE);
object GetAttackTarget(object oCreature=OBJECT_SELF);
int GetLastAttackType(object oCreature=OBJECT_SELF);
int GetLastAttackMode(object oCreature=OBJECT_SELF);
object GetMaster(object oAssociate=OBJECT_SELF);
int GetIsInCombat(object oCreature=OBJECT_SELF);
int GetLastAssociateCommand(object oAssociate=OBJECT_SELF);
void GiveGoldToCreature(object oCreature, int nGP);
void SetIsDestroyable(int bDestroyable, int bRaiseable=TRUE, int bSelectableWhenDead=FALSE);
void SetLocked(object oTarget, int bLocked);
int GetLocked(object oTarget);
object GetClickingObject();
void SetAssociateListenPatterns(object oTarget=OBJECT_SELF);
object GetLastWeaponUsed(object oCreature);
void ActionInteractObject(object oPlaceable);
object GetLastUsedBy();
int GetAbilityModifier(int nAbility, object oCreature=OBJECT_SELF);
int GetIdentified(object oItem);
void SetIdentified(object oItem, int bIdentified);
void SummonAnimalCompanion(object oMaster=OBJECT_SELF);
void SummonFamiliar(object oMaster=OBJECT_SELF);
object GetBlockingDoor();
int GetIsDoorActionPossible(object oTargetDoor, int nDoorAction);
void DoDoorAction(object oTargetDoor, int nDoorAction);
object GetFirstItemInInventory(object oTarget=OBJECT_SELF);
object GetNextItemInInventory(object oTarget=OBJECT_SELF);
int GetClassByPosition(int nClassPosition, object oCreature=OBJECT_SELF);
int GetLevelByPosition(int nClassPosition, object oCreature=OBJECT_SELF);
int GetLevelByClass(int nClassType, object oCreature=OBJECT_SELF);
int GetDamageDealtByType(int nDamageType);
int GetTotalDamageDealt();
object GetLastDamager(object oObject=OBJECT_SELF);
object GetLastDisarmed();
object GetLastDisturbed();
object GetLastLocked();
object GetLastUnlocked();
effect EffectSkillIncrease(int nSkill, int nValue);
int GetInventoryDisturbType();
object GetInventoryDisturbItem();
object GetHenchman(object oMaster=OBJECT_SELF,int nNth=1);
effect VersusAlignmentEffect(effect eEffect, int nLawChaos=ALIGNMENT_ALL, int nGoodEvil=ALIGNMENT_ALL);
effect VersusRacialTypeEffect(effect eEffect, int nRacialType);
effect VersusTrapEffect(effect eEffect);
int GetGender(object oCreature);
int GetIsTalentValid(talent tTalent);
void ActionMoveAwayFromLocation(location lMoveAwayFrom, int bRun=FALSE, float fMoveAwayRange=40.0f);
object GetAttemptedAttackTarget();
int GetTypeFromTalent(talent tTalent);
int GetIdFromTalent(talent tTalent);
object GetAssociate(int nAssociateType, object oMaster=OBJECT_SELF, int nTh=1);
void AddHenchman(object oMaster, object oHenchman=OBJECT_SELF);
void RemoveHenchman(object oMaster, object oHenchman=OBJECT_SELF);
void AddJournalQuestEntry(string szPlotID, int nState, object oCreature, int bAllPartyMembers=TRUE, int bAllPlayers=FALSE, int bAllowOverrideHigher=FALSE);
void RemoveJournalQuestEntry(string szPlotID, object oCreature, int bAllPartyMembers=TRUE, int bAllPlayers=FALSE);
string GetPCPublicCDKey(object oPlayer, int nSinglePlayerCDKey=FALSE);
string GetPCIPAddress(object oPlayer);
string GetPCPlayerName(object oPlayer);
void SetPCLike(object oPlayer, object oTarget);
void SetPCDislike(object oPlayer, object oTarget);
void SendMessageToPC(object oPlayer, string szMessage);
object GetAttemptedSpellTarget();
object GetLastOpenedBy();
int GetHasSpell(int nSpell, object oCreature=OBJECT_SELF);
void CORE_OpenStore(object oStore, object oPC, int nBonusMarkUp=0, int nBonusMarkDown=0);
effect EffectTurned();
object GetFirstFactionMember(object oMemberOfFaction, int bPCOnly=TRUE);
object GetNextFactionMember(object oMemberOfFaction, int bPCOnly=TRUE);
void ActionForceMoveToLocation(location lDestination, int bRun=FALSE, float fTimeout=30.0f);
void ActionForceMoveToObject(object oMoveTo, int bRun=FALSE, float fRange=1.0f, float fTimeout=30.0f);
int GetJournalQuestExperience(string szPlotID);
void JumpToObject(object oToJumpTo, int nWalkStraightLineToPoint=1);
void SetMapPinEnabled(object oMapPin, int nEnabled);
effect EffectHitPointChangeWhenDying(float fHitPointChangePerRound);
void PopUpGUIPanel(object oPC, int nGUIPanel);
void ClearPersonalReputation(object oTarget, object oSource=OBJECT_SELF);
void SetIsTemporaryFriend(object oTarget, object oSource=OBJECT_SELF, int bDecays=FALSE, float fDurationInSeconds=180.0f);
void SetIsTemporaryEnemy(object oTarget, object oSource=OBJECT_SELF, int bDecays=FALSE, float fDurationInSeconds=180.0f);
void SetIsTemporaryNeutral(object oTarget, object oSource=OBJECT_SELF, int bDecays=FALSE, float fDurationInSeconds=180.0f);
void GiveXPToCreature(object oCreature, int nXpAmount);
void SetXP(object oCreature, int nXpAmount);
int GetXP(object oCreature);
string IntToHexString(int nInteger);
int GetBaseItemType(object oItem);
int GetItemHasItemProperty(object oItem, int nProperty);
void ActionEquipMostDamagingMelee(object oVersus=OBJECT_INVALID, int bOffHand=FALSE);
void ActionEquipMostDamagingRanged(object oVersus=OBJECT_INVALID);
int GetItemACValue(object oItem);
void ActionRest(int bCreatureToEnemyLineOfSightCheck=FALSE);
void ExploreAreaForPlayer(object oArea, object oPlayer, int bExplored=TRUE);
void ActionEquipMostEffectiveArmor();
int GetIsDay();
int GetIsNight();
int GetIsDawn();
int GetIsDusk();
int GetIsEncounterCreature(object oCreature=OBJECT_SELF);
object GetLastPlayerDying();
location GetStartingLocation();
void ChangeToStandardFaction(object oCreatureToChange, int nStandardFaction);
void SoundObjectPlay(object oSound);
void SoundObjectStop(object oSound);
void SoundObjectSetVolume(object oSound, int nVolume);
void SoundObjectSetPosition(object oSound, vector vPosition);
void SpeakOneLinerConversation(string sDialogResRef="", object oTokenTarget=OBJECT_TYPE_INVALID);
int GetGold(object oTarget=OBJECT_SELF);
object GetLastRespawnButtonPresser();
int GetIsDM(object oCreature);
void PlayVoiceChat(int nVoiceChatID, object oTarget=OBJECT_SELF);
int GetIsWeaponEffective(object oVersus=OBJECT_INVALID, int bOffHand=FALSE);
int GetLastSpellHarmful();
event EventActivateItem(object oItem, location lTarget, object oTarget=OBJECT_INVALID);
void MusicBackgroundPlay(object oArea);
void MusicBackgroundStop(object oArea);
void MusicBackgroundSetDelay(object oArea, int nDelay);
void MusicBackgroundChangeDay(object oArea, int nTrack);
void MusicBackgroundChangeNight(object oArea, int nTrack);
void MusicBattlePlay(object oArea);
void MusicBattleStop(object oArea);
void MusicBattleChange(object oArea, int nTrack);
void AmbientSoundPlay(object oArea);
void AmbientSoundStop(object oArea);
void AmbientSoundChangeDay(object oArea, int nTrack);
void AmbientSoundChangeNight(object oArea, int nTrack);
object GetLastKiller();
object GetSpellCastItem();
object GetItemActivated();
object GetItemActivator();
location GetItemActivatedTargetLocation();
object GetItemActivatedTarget();
int GetIsOpen(object oObject);
void TakeGoldFromCreature(int nAmount, object oCreatureToTakeFrom, int bDestroy=FALSE);
int IsInConversation(object oObject);
effect EffectAbilityDecrease(int nAbility, int nModifyBy);
effect EffectAttackDecrease(int nPenalty, int nModifierType=ATTACK_BONUS_MISC);
effect EffectDamageDecrease(int nPenalty, int nDamageType=DAMAGE_TYPE_MAGICAL);
effect EffectDamageImmunityDecrease(int nDamageType, int nPercentImmunity);
effect EffectACDecrease(int nValue, int nModifyType=AC_DODGE_BONUS, int nDamageType=AC_VS_DAMAGE_TYPE_ALL);
effect EffectMovementSpeedDecrease(int nPercentChange);
effect EffectSavingThrowDecrease(int nSave, int nValue, int nSaveType=SAVING_THROW_TYPE_ALL);
effect EffectSkillDecrease(int nSkill, int nValue);
effect EffectSpellResistanceDecrease(int nValue);
int GetPlotFlag(object oTarget=OBJECT_SELF);
void SetPlotFlag(object oTarget, int nPlotFlag);
effect EffectInvisibility(int nInvisibilityType);
effect EffectConcealment(int nPercentage, int nMissType=MISS_CHANCE_TYPE_NORMAL);
effect EffectDarkness();
effect EffectDispelMagicAll(int nCasterLevel=USE_CREATURE_LEVEL);
effect EffectUltravision();
effect EffectNegativeLevel(int nNumLevels, int bHPBonus=FALSE);
effect EffectPolymorph(int nPolymorphSelection, int nLocked=FALSE);
effect EffectSanctuary(int nDifficultyClass);
effect EffectTrueSeeing();
effect EffectSeeInvisible();
effect EffectTimeStop();
effect EffectBlindness();
int GetIsReactionTypeFriendly(object oTarget, object oSource=OBJECT_SELF);
int GetIsReactionTypeNeutral(object oTarget, object oSource=OBJECT_SELF);
int GetIsReactionTypeHostile(object oTarget, object oSource=OBJECT_SELF);
effect EffectSpellLevelAbsorption(int nMaxSpellLevelAbsorbed, int nTotalSpellLevelsAbsorbed=0, int nSpellSchool=SPELL_SCHOOL_GENERAL );
effect EffectDispelMagicBest(int nCasterLevel=USE_CREATURE_LEVEL);
void CORE_ActivatePortal(object oTarget, string sIPaddress="", string sPassword="", string sWaypointTag="", int bSeemless=FALSE);
int GetNumStackedItems(object oItem);
void SurrenderToEnemies();
effect EffectMissChance(int nPercentage, int nMissChanceType=MISS_CHANCE_TYPE_NORMAL);
int GetTurnResistanceHD(object oUndead=OBJECT_SELF);
int GetCreatureSize(object oCreature);
effect EffectDisappearAppear(location lLocation, int nAnimation=1);
effect EffectDisappear(int nAnimation=1);
effect EffectAppear(int nAnimation=1);
void ActionUnlockObject(object oTarget);
void ActionLockObject(object oTarget);
effect EffectModifyAttacks(int nAttacks);
object GetLastTrapDetected(object oTarget=OBJECT_SELF);
effect EffectDamageShield(int nDamageAmount, int nRandomAmount, int nDamageType);
object GetNearestTrapToObject(object oTarget=OBJECT_SELF, int nTrapDetected=TRUE);
string GetDeity(object oCreature);
string GetSubRace(object oTarget);
int GetFortitudeSavingThrow(object oTarget);
int GetWillSavingThrow(object oTarget);
int GetReflexSavingThrow(object oTarget);
float GetChallengeRating(object oCreature);
int GetAge(object oCreature);
int GetMovementRate(object oCreature);
int GetFamiliarCreatureType(object oCreature);
int GetAnimalCompanionCreatureType(object oCreature);
string GetFamiliarName(object oCreature);
string GetAnimalCompanionName(object oTarget);
void ActionCastFakeSpellAtObject(int nSpell, object oTarget, int nProjectilePathType=PROJECTILE_PATH_TYPE_DEFAULT);
void ActionCastFakeSpellAtLocation(int nSpell, location lTarget, int nProjectilePathType=PROJECTILE_PATH_TYPE_DEFAULT);
void RemoveSummonedAssociate(object oMaster, object oAssociate=OBJECT_SELF);
void SetCameraMode(object oPlayer, int nCameraMode);
int GetIsResting(object oCreature=OBJECT_SELF);
object GetLastPCRested();
void SetWeather(object oTarget, int nWeather);
int GetLastRestEventType();
void StartNewModule(string sModuleName);
effect EffectSwarm(int nLooping, string sCreatureTemplate1, string sCreatureTemplate2="", string sCreatureTemplate3="", string sCreatureTemplate4="");
int GetWeaponRanged(object oItem);
void DoSinglePlayerAutoSave();
int GetGameDifficulty();
void SetTileMainLightColor(location lTileLocation, int nMainLight1Color, int nMainLight2Color);
void SetTileSourceLightColor(location lTileLocation, int nSourceLight1Color, int nSourceLight2Color);
void RecomputeStaticLighting(object oArea);
int GetTileMainLight1Color(location lTile);
int GetTileMainLight2Color(location lTile);
int GetTileSourceLight1Color(location lTile);
int GetTileSourceLight2Color(location lTile);
void SetPanelButtonFlash(object oPlayer, int nButton, int nEnableFlash);
int GetCurrentAction(object oObject=OBJECT_SELF);
void SetStandardFactionReputation(int nStandardFaction, int nNewReputation, object oCreature=OBJECT_SELF);
int GetStandardFactionReputation(int nStandardFaction, object oCreature=OBJECT_SELF);
void FloatingTextStrRefOnCreature(int nStrRefToDisplay, object oCreatureToFloatAbove, int bBroadcastToFaction=TRUE);
void FloatingTextStringOnCreature(string sStringToDisplay, object oCreatureToFloatAbove, int bBroadcastToFaction=TRUE);
int GetTrapDisarmable(object oTrapObject);
int GetTrapDetectable(object oTrapObject);
int GetTrapDetectedBy(object oTrapObject, object oCreature);
int GetTrapFlagged(object oTrapObject);
int GetTrapBaseType(object oTrapObject);
int GetTrapOneShot(object oTrapObject);
object GetTrapCreator(object oTrapObject);
string GetTrapKeyTag(object oTrapObject);
int GetTrapDisarmDC(object oTrapObject);
int GetTrapDetectDC(object oTrapObject);
int GetLockKeyRequired(object oObject);
string GetLockKeyTag(object oObject);
int GetLockLockable(object oObject);
int GetLockUnlockDC(object oObject);
int GetLockLockDC(object oObject);
object GetPCLevellingUp();
int GetHasFeatEffect(int nFeat, object oObject=OBJECT_SELF);
void SetPlaceableIllumination(object oPlaceable=OBJECT_SELF, int bIlluminate=TRUE);
int GetPlaceableIllumination(object oPlaceable=OBJECT_SELF);
int GetIsPlaceableObjectActionPossible(object oPlaceable, int nPlaceableAction);
void DoPlaceableObjectAction(object oPlaceable, int nPlaceableAction);
object GetFirstPC();
object GetNextPC();
int SetTrapDetectedBy(object oTrap, object oDetector, int bDetected=TRUE);
int GetIsTrapped(object oObject);
effect EffectTurnResistanceDecrease(int nHitDice);
effect EffectTurnResistanceIncrease(int nHitDice);
void PopUpDeathGUIPanel(object oPC, int bRespawnButtonEnabled=TRUE, int bWaitForHelpButtonEnabled=TRUE, int nHelpStringReference=0, string sHelpString="");
void SetTrapDisabled(object oTrap);
object GetLastHostileActor(object oVictim=OBJECT_SELF);
void CORE_ExportAllCharacters();
int MusicBackgroundGetDayTrack(object oArea);
int MusicBackgroundGetNightTrack(object oArea);
void WriteTimestampedLogEntry(string sLogEntry);
string GetModuleName();
object GetFactionLeader(object oMemberOfFaction);
void SendMessageToAllDMs(string szMessage);
void EndGame(string sEndMovie);
void BootPC(object oPlayer);
void ActionCounterSpell(object oCounterSpellTarget);
void AmbientSoundSetDayVolume(object oArea, int nVolume);
void AmbientSoundSetNightVolume(object oArea, int nVolume);
int MusicBackgroundGetBattleTrack(object oArea);
int GetHasInventory(object oObject);
float GetStrRefSoundDuration(int nStrRef);
void AddToParty(object oPC, object oPartyLeader);
void RemoveFromParty(object oPC);
int GetStealthMode(object oCreature);
int GetDetectMode(object oCreature);
int GetDefensiveCastingMode(object oCreature);
int GetAppearanceType(object oCreature);
void SpawnScriptDebugger();
int GetModuleItemAcquiredStackSize();
void DecrementRemainingFeatUses(object oCreature, int nFeat);
void DecrementRemainingSpellUses(object oCreature, int nSpell);
string GetResRef(object oObject);
effect EffectPetrify();
object CORE_CopyItem(object oItem, object oTargetInventory=OBJECT_INVALID, int bCopyVars=FALSE);
effect EffectCutsceneParalyze();
int GetDroppableFlag(object oItem);
int GetUseableFlag(object oObject=OBJECT_SELF);
int GetStolenFlag(object oStolen);
void SetCampaignFloat(string sCampaignName, string sVarName, float flFloat, object oPlayer=OBJECT_INVALID);
void SetCampaignInt(string sCampaignName, string sVarName, int nInt, object oPlayer=OBJECT_INVALID);
void SetCampaignVector(string sCampaignName, string sVarName, vector vVector, object oPlayer=OBJECT_INVALID);
void SetCampaignLocation(string sCampaignName, string sVarName, location locLocation, object oPlayer=OBJECT_INVALID);
void SetCampaignString(string sCampaignName, string sVarName, string sString, object oPlayer=OBJECT_INVALID);
void DestroyCampaignDatabase(string sCampaignName);
float GetCampaignFloat(string sCampaignName, string sVarName, object oPlayer=OBJECT_INVALID);
int GetCampaignInt(string sCampaignName, string sVarName, object oPlayer=OBJECT_INVALID);
vector GetCampaignVector(string sCampaignName, string sVarName, object oPlayer=OBJECT_INVALID);
location GetCampaignLocation(string sCampaignName, string sVarName, object oPlayer=OBJECT_INVALID);
string GetCampaignString(string sCampaignName, string sVarName, object oPlayer=OBJECT_INVALID);
object CopyObject(object oSource, location locLocation, object oOwner=OBJECT_INVALID, string sNewTag="");
void DeleteCampaignVariable(string sCampaignName, string sVarName, object oPlayer=OBJECT_INVALID);
int StoreCampaignObject(string sCampaignName, string sVarName, object oObject, object oPlayer=OBJECT_INVALID);
object RetrieveCampaignObject(string sCampaignName, string sVarName, location locLocation, object oOwner=OBJECT_INVALID, object oPlayer=OBJECT_INVALID);
effect EffectCutsceneDominated();
int GetItemStackSize(object oItem);
void SetItemStackSize(object oItem, int nSize);
int GetItemCharges(object oItem);
void SetItemCharges(object oItem, int nCharges);
void AddItemProperty(int nDurationType, itemproperty ipProperty, object oItem, float fDuration=0.0f);
void RemoveItemProperty(object oItem, itemproperty ipProperty);
int GetIsItemPropertyValid(itemproperty ipProperty);
itemproperty GetFirstItemProperty(object oItem);
itemproperty GetNextItemProperty(object oItem);
int GetItemPropertyType(itemproperty ip);
int GetItemPropertyDurationType(itemproperty ip);
itemproperty ItemPropertyAbilityBonus(int nAbility, int nBonus);
itemproperty ItemPropertyACBonus(int nBonus);
itemproperty ItemPropertyACBonusVsAlign(int nAlignGroup, int nACBonus);
itemproperty ItemPropertyACBonusVsDmgType(int nDamageType, int nACBonus);
itemproperty ItemPropertyACBonusVsRace(int nRace, int nACBonus);
itemproperty ItemPropertyACBonusVsSAlign(int nAlign, int nACBonus);
itemproperty ItemPropertyEnhancementBonus(int nEnhancementBonus);
itemproperty ItemPropertyEnhancementBonusVsAlign(int nAlignGroup, int nBonus);
itemproperty ItemPropertyEnhancementBonusVsRace(int nRace, int nBonus);
itemproperty ItemPropertyEnhancementBonusVsSAlign(int nAlign, int nBonus);
itemproperty ItemPropertyEnhancementPenalty(int nPenalty);
itemproperty ItemPropertyWeightReduction(int nReduction);
itemproperty ItemPropertyBonusFeat(int nFeat);
itemproperty ItemPropertyBonusLevelSpell(int nClass, int nSpellLevel);
itemproperty ItemPropertyCastSpell(int nSpell, int nNumUses);
itemproperty ItemPropertyDamageBonus(int nDamageType, int nDamage);
itemproperty ItemPropertyDamageBonusVsAlign(int nAlignGroup, int nDamageType, int nDamage);
itemproperty ItemPropertyDamageBonusVsRace(int nRace, int nDamageType, int nDamage);
itemproperty ItemPropertyDamageBonusVsSAlign(int nAlign, int nDamageType, int nDamage);
itemproperty ItemPropertyDamageImmunity(int nDamageType, int nImmuneBonus);
itemproperty ItemPropertyDamagePenalty(int nPenalty);
itemproperty ItemPropertyDamageReduction(int nEnhancement, int nHPSoak);
itemproperty ItemPropertyDamageResistance(int nDamageType, int nHPResist);
itemproperty ItemPropertyDamageVulnerability(int nDamageType, int nVulnerability);
itemproperty ItemPropertyDarkvision();
itemproperty ItemPropertyDecreaseAbility(int nAbility, int nModifier);
itemproperty ItemPropertyDecreaseAC(int nModifierType, int nPenalty);
itemproperty ItemPropertyDecreaseSkill(int nSkill, int nPenalty);
itemproperty ItemPropertyContainerReducedWeight(int nContainerType);
itemproperty ItemPropertyExtraMeleeDamageType(int nDamageType);
itemproperty ItemPropertyExtraRangeDamageType(int nDamageType);
itemproperty ItemPropertyHaste();
itemproperty ItemPropertyHolyAvenger();
itemproperty ItemPropertyImmunityMisc(int nImmunityType);
itemproperty ItemPropertyImprovedEvasion();
itemproperty ItemPropertyBonusSpellResistance(int nBonus);
itemproperty ItemPropertyBonusSavingThrowVsX(int nBonusType, int nBonus);
itemproperty ItemPropertyBonusSavingThrow(int nBaseSaveType, int nBonus);
itemproperty ItemPropertyKeen();
itemproperty ItemPropertyLight(int nBrightness, int nColor);
itemproperty ItemPropertyMaxRangeStrengthMod(int nModifier);
itemproperty ItemPropertyNoDamage();
itemproperty ItemPropertyOnHitProps(int nProperty, int nSaveDC, int nSpecial=0);
itemproperty ItemPropertyReducedSavingThrowVsX(int nBaseSaveType, int nPenalty);
itemproperty ItemPropertyReducedSavingThrow(int nBonusType, int nPenalty);
itemproperty ItemPropertyRegeneration(int nRegenAmount);
itemproperty ItemPropertySkillBonus(int nSkill, int nBonus);
itemproperty ItemPropertySpellImmunitySpecific(int nSpell);
itemproperty ItemPropertySpellImmunitySchool(int nSchool);
itemproperty ItemPropertyThievesTools(int nModifier);
itemproperty ItemPropertyAttackBonus(int nBonus);
itemproperty ItemPropertyAttackBonusVsAlign(int nAlignGroup, int nBonus);
itemproperty ItemPropertyAttackBonusVsRace(int nRace, int nBonus);
itemproperty ItemPropertyAttackBonusVsSAlign(int nAlignment, int nBonus);
itemproperty ItemPropertyAttackPenalty(int nPenalty);
itemproperty ItemPropertyUnlimitedAmmo(int nAmmoDamage=IP_CONST_UNLIMITEDAMMO_BASIC);
itemproperty ItemPropertyLimitUseByAlign(int nAlignGroup);
itemproperty ItemPropertyLimitUseByClass(int nClass);
itemproperty ItemPropertyLimitUseByRace(int nRace);
itemproperty ItemPropertyLimitUseBySAlign(int nAlignment);
itemproperty BadBadReplaceMeThisDoesNothing();
itemproperty ItemPropertyVampiricRegeneration(int nRegenAmount);
itemproperty ItemPropertyTrap(int nTrapLevel, int nTrapType);
itemproperty ItemPropertyTrueSeeing();
itemproperty ItemPropertyOnMonsterHitProperties(int nProperty, int nSpecial=0);
itemproperty ItemPropertyTurnResistance(int nModifier);
itemproperty ItemPropertyMassiveCritical(int nDamage);
itemproperty ItemPropertyFreeAction();
itemproperty ItemPropertyMonsterDamage(int nDamage);
itemproperty ItemPropertyImmunityToSpellLevel(int nLevel);
itemproperty ItemPropertySpecialWalk(int nWalkType=0);
itemproperty ItemPropertyHealersKit(int nModifier);
itemproperty ItemPropertyWeightIncrease(int nWeight);
int GetIsSkillSuccessful(object oTarget, int nSkill, int nDifficulty);
effect EffectSpellFailure(int nPercent=100, int nSpellSchool=SPELL_SCHOOL_GENERAL);
void SpeakStringByStrRef(int nStrRef, int nTalkVolume=TALKVOLUME_TALK);
void SetCutsceneMode(object oCreature, int nInCutscene=TRUE, int nLeftClickingEnabled=FALSE);
object GetLastPCToCancelCutscene();
float GetDialogSoundLength(int nStrRef);
void FadeFromBlack(object oCreature, float fSpeed=FADE_SPEED_MEDIUM);
void FadeToBlack(object oCreature, float fSpeed=FADE_SPEED_MEDIUM);
void StopFade(object oCreature);
void BlackScreen(object oCreature);
int GetBaseAttackBonus(object oCreature);
void SetImmortal(object oCreature, int bImmortal);
void OpenInventory(object oCreature, object oPlayer);
void StoreCameraFacing();
void RestoreCameraFacing();
int LevelUpHenchman(object oCreature, int nClass=CLASS_TYPE_INVALID, int bReadyAllSpells=FALSE, int nPackage=PACKAGE_INVALID);
void SetDroppableFlag(object oItem, int bDroppable);
int GetWeight(object oTarget=OBJECT_SELF);
object GetModuleItemAcquiredBy();
int GetImmortal(object oTarget=OBJECT_SELF);
void DoWhirlwindAttack(int bDisplayFeedback=TRUE, int bImproved=FALSE);
string Get2DAString(string s2DA, string sColumn, int nRow);
effect EffectEthereal();
int GetAILevel(object oTarget=OBJECT_SELF);
void SetAILevel(object oTarget, int nAILevel);
int GetIsPossessedFamiliar(object oCreature);
void UnpossessFamiliar(object oCreature);
int GetIsAreaInterior( object oArea=OBJECT_INVALID );
void SendMessageToPCByStrRef(object oPlayer, int nStrRef);
void IncrementRemainingFeatUses(object oCreature, int nFeat);
void CORE_ExportSingleCharacter(object oPlayer);
void PlaySoundByStrRef(int nStrRef, int nRunAsAction=TRUE );
void SetSubRace(object oCreature, string sSubRace);
void SetDeity(object oCreature, string sDeity);
int GetIsDMPossessed(object oCreature);
int GetWeather(object oArea);
int GetIsAreaNatural(object oArea);
int GetIsAreaAboveGround(object oArea);
object GetPCItemLastEquipped();
object GetPCItemLastEquippedBy();
object GetPCItemLastUnequipped();
object GetPCItemLastUnequippedBy();
object CopyItemAndModify(object oItem, int nType, int nIndex, int nNewValue, int bCopyVars=FALSE);
int GetItemAppearance(object oItem, int nType, int nIndex);
itemproperty ItemPropertyOnHitCastSpell(int nSpell, int nLevel);
int GetItemPropertySubType(itemproperty iProperty);
int GetActionMode(object oCreature, int nMode);
void SetActionMode(object oCreature, int nMode, int nStatus);
int GetArcaneSpellFailure(object oCreature);
void ActionExamine(object oExamine);
itemproperty ItemPropertyVisualEffect(int nEffect);
void SetLootable( object oCreature, int bLootable );
int GetLootable( object oCreature );
float GetCutsceneCameraMoveRate( object oCreature );
void SetCutsceneCameraMoveRate( object oCreature, float fRate );
int GetItemCursedFlag(object oItem);
void SetItemCursedFlag(object oItem, int nCursed);
void SetMaxHenchmen( int nNumHenchmen );
int GetMaxHenchmen();
int GetAssociateType( object oAssociate );
int GetSpellResistance( object oCreature );
void DayToNight(object oPlayer, float fTransitionTime=0.0f);
void NightToDay(object oPlayer, float fTransitionTime=0.0f);
int LineOfSightObject( object oSource, object oTarget );
int LineOfSightVector( vector vSource, vector vTarget );
int GetLastSpellCastClass();
void SetBaseAttackBonus( int nBaseAttackBonus, object oCreature=OBJECT_SELF );
void RestoreBaseAttackBonus( object oCreature=OBJECT_SELF );
effect EffectCutsceneGhost();
itemproperty ItemPropertyArcaneSpellFailure(int nModLevel);
int GetStoreGold(object oidStore);
void SetStoreGold(object oidStore, int nGold);
int GetStoreMaxBuyPrice(object oidStore);
void SetStoreMaxBuyPrice(object oidStore, int nMaxBuy);
int GetStoreIdentifyCost(object oidStore);
void SetStoreIdentifyCost(object oidStore, int nCost);
void SetCreatureAppearanceType(object oCreature, int nAppearanceType);
int GetCreatureStartingPackage(object oCreature);
effect EffectCutsceneImmobilize();
int GetIsInSubArea(object oCreature, object oSubArea=OBJECT_SELF);
int GetItemPropertyCostTable(itemproperty iProp);
int GetItemPropertyCostTableValue(itemproperty iProp);
int GetItemPropertyParam1(itemproperty iProp);
int GetItemPropertyParam1Value(itemproperty iProp);
int GetIsCreatureDisarmable(object oCreature);
void SetStolenFlag(object oItem, int nStolenFlag);
void ForceRest(object oCreature);
void SetCameraHeight(object oPlayer, float fHeight=0.0f);
void SetSkyBox(int nSkyBox, object oArea=OBJECT_INVALID);
int GetPhenoType(object oCreature);
void SetPhenoType(int nPhenoType, object oCreature=OBJECT_SELF);
void SetFogColor(int nFogType, int nFogColor, object oArea=OBJECT_INVALID);
int GetCutsceneMode(object oCreature=OBJECT_SELF);
int GetSkyBox(object oArea=OBJECT_INVALID);
int GetFogColor(int nFogType, object oArea=OBJECT_INVALID);
void SetFogAmount(int nFogType, int nFogAmount, object oArea=OBJECT_INVALID);
int GetFogAmount(int nFogType, object oArea=OBJECT_INVALID);
int GetPickpocketableFlag(object oItem);
void SetPickpocketableFlag(object oItem, int bPickpocketable);
int GetFootstepType(object oCreature=OBJECT_SELF);
void SetFootstepType(int nFootstepType, object oCreature=OBJECT_SELF);
int GetCreatureWingType(object oCreature=OBJECT_SELF);
void SetCreatureWingType(int nWingType, object oCreature=OBJECT_SELF);
int GetCreatureBodyPart(int nPart, object oCreature=OBJECT_SELF);
void SetCreatureBodyPart(int nPart, int nModelNumber, object oCreature=OBJECT_SELF);
int GetCreatureTailType(object oCreature=OBJECT_SELF);
void SetCreatureTailType(int nTailType, object oCreature=OBJECT_SELF);
int GetHardness(object oObject=OBJECT_SELF);
void SetHardness(int nHardness, object oObject=OBJECT_SELF);
void SetLockKeyRequired(object oObject, int nKeyRequired=TRUE);
void SetLockKeyTag(object oObject, string sNewKeyTag);
void SetLockLockable(object oObject, int nLockable=TRUE);
void SetLockUnlockDC(object oObject, int nNewUnlockDC);
void SetLockLockDC(object oObject, int nNewLockDC);
void SetTrapDisarmable(object oTrapObject, int nDisarmable=TRUE);
void SetTrapDetectable(object oTrapObject, int nDetectable=TRUE);
void SetTrapOneShot(object oTrapObject, int nOneShot=TRUE);
void SetTrapKeyTag(object oTrapObject, string sKeyTag);
void SetTrapDisarmDC(object oTrapObject, int nDisarmDC);
void SetTrapDetectDC(object oTrapObject, int nDetectDC);
object CreateTrapAtLocation(int nTrapType, location lLocation, float fSize=2.0f, string sTag="", int nFaction=STANDARD_FACTION_HOSTILE, string sOnDisarmScript="", string sOnTrapTriggeredScript="");
void CreateTrapOnObject(int nTrapType, object oObject, int nFaction=STANDARD_FACTION_HOSTILE, string sOnDisarmScript="", string sOnTrapTriggeredScript="");
void SetWillSavingThrow(object oObject, int nWillSave);
void SetReflexSavingThrow(object oObject, int nReflexSave);
void SetFortitudeSavingThrow(object oObject, int nFortitudeSave);
string GetTilesetResRef(object oArea);
int GetTrapRecoverable(object oTrapObject);
void SetTrapRecoverable(object oTrapObject, int nRecoverable=TRUE);
int GetModuleXPScale();
void SetModuleXPScale(int nXPScale);
string GetKeyRequiredFeedback(object oObject);
void SetKeyRequiredFeedback(object oObject, string sFeedbackMessage);
int GetTrapActive(object oTrapObject);
void SetTrapActive(object oTrapObject, int nActive=TRUE);
void LockCameraPitch(object oPlayer, int bLocked=TRUE);
void LockCameraDistance(object oPlayer, int bLocked=TRUE);
void LockCameraDirection(object oPlayer, int bLocked=TRUE);
object GetPlaceableLastClickedBy();
int GetInfiniteFlag(object oItem);
void SetInfiniteFlag(object oItem, int bInfinite=TRUE);
int GetAreaSize(int nAreaDimension, object oArea=OBJECT_INVALID);
void SetName(object oObject, string sNewName="");
int GetPortraitId(object oTarget=OBJECT_SELF);
void SetPortraitId(object oTarget, int nPortraitId);
string GetPortraitResRef(object oTarget=OBJECT_SELF);
void SetPortraitResRef(object oTarget, string sPortraitResRef);
void SetUseableFlag(object oPlaceable, int nUseableFlag);
string GetDescription(object oObject, int bOriginalDescription=FALSE, int bIdentifiedDescription=TRUE);
void SetDescription(object oObject, string sNewDescription="", int bIdentifiedDescription=TRUE);
object GetPCChatSpeaker();
string GetPCChatMessage();
int GetPCChatVolume();
void SetPCChatMessage(string sNewChatMessage="");
void SetPCChatVolume(int nTalkVolume=TALKVOLUME_TALK);
int GetColor(object oObject, int nColorChannel);
void SetColor(object oObject, int nColorChannel, int nColorValue);
itemproperty ItemPropertyMaterial(int nMaterialType);
itemproperty ItemPropertyQuality(int nQuality);
itemproperty ItemPropertyAdditional(int nAdditionalProperty);
#include "inc_x_vm_consts"
#include "inc_x_vm_funcs"

