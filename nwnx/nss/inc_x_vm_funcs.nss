string GetEntireItemAppearance(object oItem);
void RestoreItemAppearance(object oItem, string sAppearance);
object GetActionTarget(object oCreature);
void Spacer_4();
int IsPointInAreaOfEffect(object oAoE, vector vPoint);
int TestLineWalkable(object oArea, vector vFrom, vector vTo);
int GetResExists(string sResFileName);
void AddExtraFeat(object oCreature, int nFeat);
void RemoveExtraFeat(object oCreature, int nFeat);
void ApplyExtraAbilityBonus(object oCreature, int nAbility, int nBonus);
void RestoreExtraStats(object oCreature);
void ApplyExtraSkillBonus(object oCreature, int nSkill, int nBonus);
void RemoveFeatFromLevelStats(object oCreature, int nFeat, int nLevel=-1);
int EnforceLegalCharacter(string sCharacterFile);
int GetArmorExtraData(object oArmor, int nArmorPart, int nExtraInfo, int nInfoParam);
void SetArmorExtraData(object oArmor, int nArmorPart, int nExtraInfo, int nInfoParam, int nValue);
float GetArmorExtraDataFloat(object oArmor, int nArmorPart, int nExtraInfo);
void SetArmorExtraDataFloat(object oArmor, int nArmorPart, int nExtraInfo, float fValue);
int GetPlayerCount();
string GetPlayerNameByListIndex(int nListIndex);
object GetPlayerCharacterByListIndex(int nListIndex);
void BootPlayerByListIndex(int nListIndex, int nStrRef);
int GetBannedFromServers(object oPlayer);
int GetSystemTime();
void ShutdownServer(int nForce=0);
void SetTMILimit(int nLimit);
int FileDelete(string sFile);
int FileRename(string sFrom, string sTo);
int GetProcessMemoryUsage();
int GetSinglePCPartExtraData(string sXDATA, int nExtraInfo, int nInfoParam);
string SetSinglePCPartExtraData(string sXDATA, int nExtraInfo, int nInfoParam, int nValue);
float GetSinglePCPartExtraDataFloat(string sXDATA, int nExtraInfo);
string SetSinglePCPartExtraDataFloat(string sXDATA, int nExtraInfo, float fValue);
string SQLEncodeSpecialChars(string sToEncode);
object SQLGetObject(int nColumnIndex, location lLocation, object oOwner=OBJECT_INVALID);
int SQLFetch();
string SQLGetData(int nColumnIndex);
int SQLGetInt(int nColumnIndex);
float SQLGetFloat(int nColumnIndex);
int SQLStoreObject(string sSQL, object oObject);
object SQLRetrieveObject(string sSQL, location lLocation, object oOwner=OBJECT_INVALID);
dbresult SQLExec(string sSQL);
string SQLQuote(string sToEncode);
void SendUDPMessage(int nPort, string sMessage);
int GetLastDialogReplyTime(object oCreature);
object GetDialogWith(object oObject);
float GetItemPropertyCostByValues(int nItemPropertyType, int nItemPropertySubType, int nItemPropertyCostTable);
int GetItemPropertyPPByValues(int nItemPropertyType, int nItemPropertySubType, int nItemPropertyCostTable);
int GetItemPropertiesPP(object oItem);
string GetItemPropertyMaterialByValues(int nItemPropertyType, int nItemPropertySubType, int nItemPropertyCostTable);
int Get2DARowCount(string sTableName);
int Get2DAColCount(string sTableName);
string Get2DAColumnNameByIndex(string sTableName, int nColumnIndex);
string Get2DAStringByColumnIndex(string sTableName, int nColumnIndex, int nRow);
int GetNext2DARowWithPrefix(string sTableName, string sColumnIndex, int nRow, string sPrefix);
void ReloadCached2DA(string sTableName);
int GetNext2DARowWithValue(string sTableName, string sColumnIndex, int nRow, string sValue);
int GetArraySize(array aArray);
void DeleteArrayItem(array aArray, int nIndex);
array CopyArray(array aToCopy);
void SortArray(array aToSort);
void AddArrayInt(array aArray, int nValue);
void SetArrayInt(array aArray, int nIndex, int nValue);
int GetArrayInt(array aArray, int nIndex);
void AddArrayFloat(array aArray, float fValue);
void SetArrayFloat(array aArray, int nIndex, float fValue);
float GetArrayFloat(array aArray, int nIndex);
void AddArrayObject(array aArray, object oValue);
void SetArrayObject(array aArray, int nIndex, object oValue);
object GetArrayObject(array aArray, int nIndex);
void AddArrayString(array aArray, string sValue);
void SetArrayString(array aArray, int nIndex, string sValue);
string GetArrayString(array aArray, int nIndex);
void AddArrayVector(array aArray, vector vValue);
void SetArrayVector(array aArray, int nIndex, vector vValue);
vector GetArrayVector(array aArray, int nIndex);
void AddArrayLocation(array aArray, location lValue);
void SetArrayLocation(array aArray, int nIndex, location lValue);
location GetArrayLocation(array aArray, int nIndex);
void AddArrayArray(array aArray, array aValue);
void SetArrayArray(array aArray, int nIndex, array aValue);
array GetArrayArray(array aArray, int nIndex);
void AddArrayDictionary(array aArray, dictionary dValue);
void SetArrayDictionary(array aArray, int nIndex, dictionary dValue);
dictionary GetArrayDictionary(array aArray, int nIndex);
string ArrayToString(array aArray, string sSeparator);
array StringToArray(string sString, string sSeparator);
int GetDictionarySize(dictionary dDictionary);
void DeleteDictionaryItem(dictionary dDictionary, string sKey);
dictionary CopyDictionary(dictionary dDictionary);
array GetFirstDictionaryPair(dictionary dDictionary);
array GetNextDictionaryPair(dictionary dDictionary);
array GetDictionaryKeys(dictionary dDictionary);
array GetDictionaryValues(dictionary dDictionary);
void SetDictionaryInt(dictionary dDictionary, string sKey, int nValue);
int GetDictionaryInt(dictionary dDictionary, string sKey);
void SetDictionaryFloat(dictionary dDictionary, string sKey, float fValue);
float GetDictionaryFloat(dictionary dDictionary, string sKey);
void SetDictionaryObject(dictionary dDictionary, string sKey, object oValue);
object GetDictionaryObject(dictionary dDictionary, string sKey);
void SetDictionaryString(dictionary dDictionary, string sKey, string sValue);
string GetDictionaryString(dictionary dDictionary, string sKey);
void SetDictionaryVector(dictionary dDictionary, string sKey, vector vValue);
vector GetDictionaryVector(dictionary dDictionary, string sKey);
void SetDictionaryLocation(dictionary dDictionary, string sKey, location lValue);
location GetDictionaryLocation(dictionary dDictionary, string sKey);
void SetDictionaryArray(dictionary dDictionary, string sKey, array aValue);
array GetDictionaryArray(dictionary dDictionary, string sKey);
void SetDictionaryDictionary(dictionary dDictionary, string sKey, dictionary dValue);
dictionary GetDictionaryDictionary(dictionary dDictionary, string sKey);
string TrimString(string sString);
string ReplaceSubString(string sString, string sSubString, string sReplace);
int RegexTest(string sString, string sRegex, int bCaseInsensitive=FALSE);
array RegexMatch(string sString, string sRegex, int bCaseInsensitive=FALSE);
string RegexReplace(string sString, string sRegex, string sReplacement, int bCaseInsensitive=FALSE);
string StringToJSON(string s);
string StringFromJSON(string sJSON);
string VectorToJSON(vector v);
vector VectorFromJSON(string sJSON);
string LocationToJSON(location l);
location LocationFromJSON(string sJSON);
string ArrayToJSON(array a);
array ArrayFromJSON(string sJSON);
string DictionaryToJSON(dictionary d);
dictionary DictionaryFromJSON(string sJSON);
void RemoveObjectFromAI(object oObject);
void AddObjectToAI(object oObject, int nAILevel=0);
int GetAIObjectCount(int nAILevel);
int GetGameObjectCount();
int GetSlotFromItem(object oCreature, object oItem);
void ForceEquipItem(object oCreature, object oItem, int nSlot);
void ForceUnequipItem(object oCreature, object oItem);
void SetScript(object oObject, int nEvent, string sScriptName);
string GetScript(object oObject, int nEvent);
location GetDesiredLocation(object oPC);
void ClosePlaceable(object oPlaceable);
int GetActionCount(object oObject);
int GetActionType(object oObject, int nAction);
int GetItemExtraData(object oItem, int nItemPart, int nExtraInfo, int nInfoParam);
float GetItemExtraDataFloat(object oItem, int nItemPart, int nExtraInfo);
void SetItemExtraData(object oItem, int nItemPart, int nExtraInfo, int nInfoParam, int nValue);
void SetItemExtraDataFloat(object oItem, int nItemPart, int nExtraInfo, float fValue);
int GetNumPlayersInArea(object oArea);
int IsPlayerCharacter(object oCreature);
string GetCurrentScriptName();
void StartTimer();
string EndTimer();
void Log(string sLogMessasge, string sPrefix="");
array GetLoot(int nLootId, float fCR);
void SetUseDayNightCycle(object oArea, int bUseDayNightCycle);
int GetUseDayNightCycle(object oArea);
void SetIsNight(object oArea, int bIsNight);
void EndCombatRound(object oCreature);
int MemGet(object oObject, int nOffset, int nSize);
void MemSet(object oObject, int nOffset, int nSize, int nValue);
int GetServerPort();
int GetNWNCXVersion(object oPC);
object GetPlayerArea(object oPlayer);
int GetNWServerInstanceCount();
int GetNWServerInstancePort(int nNWServerInstanceIndex=-1);
string GetNWServerInstanceName(int nNWServerInstanceIndex=-1);
int GetNWServerInstanceSharePlayerList(int nNWServerInstanceIndex=-1);
int GetNWServerInstanceDefaultHakset(int nNWServerInstanceIndex=-1);
int GetCurrentServerId();
int GetServervaultId();
string GetServerNameById(int nServerId);
int GetPortFromServerId(int nServerId);
int GetServerIdFromPort(int nPort);
int ExecuteConditionalScript(string sScriptName, object oObjectSelf);
void SetServerSetting(int nSetting, int nValue);
void SetServerSettingString(int nSetting, string sValue);
string QuickReadGFF(string sGFFFile, string sFieldName);
void SetDesiredLocation(object oPC, location lLocation);
void SetLocation(object oCreature, location lLocation);
void SetPosition(object oObject, vector vPosition);
void SetTag(object oObject, string sTag);
void SetGender(object oCreature, int nGender);
void SetBABOverride(object oCreature, int nBAB);
void SetMapNote(object oWaypoint, string sMapNote);
object _CreateArea(string sResRef);
int _DestroyArea(object oArea);
int GetIsInVisibleList(object oSource, object oTarget);
void SetCasterLevelOverride(int nCasterLevel);
void SetDispelSaveOverride(int nSaveOverride);
int GetLastSpellCastFeat(object oCreature);
void SetLastSpellCastFeat(object oCreature, int nFeat);
void SetLastSpellCastClass(object oCreature, int nClass);
void SetLastSpellCastId(object oCreature, int nSpellId);
void SetLastSpellCastFromItem(object oCreature, int bCastFromItem);
void SetLastMetaMagicFeat(object oObject, int nMetaMagic);
int GetFeatSourceClass(object oCreature, int nFeat);
int GetLastAttackRollResult(object oCreature);
int GetLastAttackFeat(object oCreature);
void SetServerSettingFloat(int nSetting, float fValue);
int GetDoorOpenState(object oDoor);
void SetDoorOpenState(object oDoor, int nState);
void InstantlyPauseConversation(object oDialogStarter, int bPause=TRUE);
void SetStoreSellMarkUp(object oStore, int nMarkUp);
int GetStoreSellMarkUp(object oStore);
void SetStoreBuyMarkDown(object oStore, int nMarkDown);
void SetStoreBuyStolenGoods(object oStore, int bBuyStolenGoods);
int GetItemAC(object oItem);
void SetItemAC(object oItem, int nAC);
void ResetItemAC(object oItem);
void CopyVariables(object oFrom, object oTo);
void SetConversationInterruptable(object oCreature, int bInterruptable);
int GetPlaceableAppearance(object oPlaceable);
void ModifyItem_NoRefresh(object oItem, int nType, int nIndex, int nNewValue);
int GetHasSpellMemorized(object oCreature, int nSpell, int nClass);
int GetAreaOfEffectCasterLevel(object oAoE);
void RemoveDoorLink(object oDoor);
void SetPlaceableStaticFlag(object oPlaceable, int bStatic);
int GetPlaceableStaticFlag(object oPlaceable);
void ForceAppearanceUpdate(object oCreature);
void StopDialog(object oPC);
int GetDoorAppearance(object oDoor);
void SetDoorAppearance(object oDoor, int nAppearance);
void SetAdditionalCost(object oItem, int nAddCost);
int GetAdditionalCost(object oItem);
void PlayInternalAnimation(int nInternalAnimation, float fSpeed=1.0, float fDurationSeconds=0.0, object oTarget=OBJECT_SELF);
void ActionPlayInternalAnimation(int nInternalAnimation, float fSpeed=1.0, float fDurationSeconds=0.0, object oTarget=OBJECT_SELF);
void ClearAllActionsOnObject(object oObject);
void UpdateMiniMap(object oPC);
void ClearMySpellsEffects(object oCaster);
void ClearSpellsEffectsOnOthers(object oCaster);
int GetUseMonkAbilities(object oCreature);
void SetStartingLocation(location lLocation);
array _GetTriggerBounds(object oTrigger);
void ForceItemStackSize(object oItem, int nStackSize);
void ReapplyItemPropertiesOfItemInSlot(object oCreature, int nSlot);
void SetHeadItemOverrideString(object oCreature, string sItem);
void SetPCCreature(object oPC, object oCreature);
void PossessFamiliar(object oPC);
void Spacer_234();
int GetAreaOfEffectSpellId(object oAOE);
int GetAreaPVPSetting(object oArea);
int GetPCLike(object oPC, object oTarget);
void SetTauntAnimationPlayed(object oCreature, int bAnimationPlayed);
string GetCreatureHeadItemOverrideString(object oCreature);
void InstantlyRemoveEffects(object oObject, int nDurationType=-1, int nEffectType=-1, int nSpellId=-1, int nInt1=-1, int nInt1Value=-1, int nInt2=-1, int nInt2Value=-1, object oCreator=OBJECT_INVALID, string sEffectTag="");
void RegisterEvent(string sEvent, string sScript);
void UnregisterEvent(string sEvent, string sScript);
void BypassRegisteredEvent();
int GetTriggerHasPoint(object oTrigger, vector vPoint);
void SetLinkedToTag(object oTrigger, int nLinkType, string sTag);
void SetDoorLinkedTo(object oDoor, object oTarget);
void SetAreaName(object oArea, string sName);
void SendChatMessage(object oFrom, int nTalkVolume, string sMessage, object oTo=OBJECT_INVALID);
void SendSingleChatMessage(object oFrom, int nSingleChatChannel, string sMessage, object oTo);
void AddChatSource(object oPC, int nVolume, string sMessage);
void AddChatTarget(int nFromPlayerId, int nToPlayerId, string sMessage);
void ReplyToWebClient(int nPlayerId, string sReason);
int _AddRemotePlayer(object oCreature, int bIsDM, string sPlayerName);
void _DeleteRemotePlayer(int nPlayerId);
effect EffectVisualEffectWithXDATA(string sXDATA, int nVisualEffectId, int nMissEffect=FALSE);
string GetVisualEffectXDATA(effect eVFX);
object GetFirstSoundObjectInArea(object oArea);
object GetNextSoundObjectInArea(object oArea);
void ReloadCustomFactionsReputations();
void UpdateCustomFactionsList(object oCreature);
int GetCustomFactionReputation(object oFromCreature, object oToCreature);
void LoadDMAreasPrefix();
int GetDamageResistance(object oCreature, int nDamageFlag, int bLimitedResistanceToo=FALSE);
int GetDamageReductionEffectForPower(object oCreature, int nPower);
int GetTotalDamageImmunity(object oCreature, int nDamType);
int GetConcealment(object oCreature, int nVersus);
void SendMapPinAdded(object oPC, vector vPosition, string sDescription, int nPinId);
void Spacer_268();
void SetMapString(string sMap, string sKey, string sString);
string GetMapString(string sMap, string sKey);
void DeleteMapString(string sMap, string sKey);
void RegisterObject(string sSet, object o);
void UnregisterObject(string sSet, object o);
void UnregisterAllObjects(string sSet);
void RunScriptOnAllRegisteredObjects(string sSet, string sScript);
void SetServerCustomToken(int nToken, string sValue, object oTarget=OBJECT_SELF);
string GetServerCustomToken(int nToken, object oTarget=OBJECT_SELF);
int GetAIEventParam1(int nEventIndex);
int GetAIEventParam2(int nEventIndex);
int GetAIEventType(int nEventIndex);
string GetAIEventScriptName(int nEventIndex);
int GetAIEventCount(int nEventType=X_EVENT_ALL);
object GetCreatureEncounter(object oCreature);
object GetBodyBagObject(object oCreature);
void SuspendArea(object oArea);
void WokeUpArea(object oArea);
object GetPlayerControlledCreature(object oPlayerGameObject);
object GetPlayerCharacter(object oPlayerControlledCreature);
void Spacer_289();
void Spacer_290();
object GetAIObjectByIndex(int nAILevel, int nIndex);
object GetGameObjectByIndex(int nIndex);
object GetFirstRegisteredObject(string sSet);
object GetNextRegisteredObject();
object UpdateItemAppr(object oItem);
int GetTrueEffectCount(object oObject);
effect GetTrueEffectByIndex(object oObject, int nIndex);
void RemoveTrueEffectByIndex(object oObject, int nIndex);
float GetEffectDuration(effect e);
float GetItemPropertyDuration(itemproperty ip);
float GetEffectDurationRemaining(effect e);
float GetItemPropertyDurationRemaining(itemproperty ip);
int GetEffectId(effect e);
void SetEffectId(effect e, int nEffectId);
int GetEffectTrueType(effect e);
void SetEffectTrueType(effect e, int nEffectId);
int GetEffectInteger(effect e, int nIndex);
int GetItemPropertyInteger(itemproperty ip, int nIndex);
void SetEffectInteger(effect e, int nIndex, int nValue);
void SetItemPropertyInteger(itemproperty ip, int nIndex, int nValue);
int GetItemPropertySpellId(itemproperty e);
void SetEffectSpellId(effect e, int nSpellId);
void SetItemPropertySpellId(itemproperty ip, int nSpellId);
object GetItemPropertyCreator(itemproperty ip);
void SetEffectCreator(effect e, object oCreator);
void SetItemPropertyCreator(itemproperty ip, object oCreator);
effect EffectBonusFeat(int nFeat);
effect EffectIcon(int nIcon);
effect EffectSetAIState(int nAIState);
void Spacer_320();
void Spacer_321();
void Spacer_322();
void Spacer_323();
int SQLAffectedRows();
void SetPlayerCharacterName(object oPC, string sName);
void SetCreatureDisplayName(object oPC, string sName);
void SetVisiblePlayerName(object oPlayer, string sVisibleName);
string GetVisiblePlayerName(object oPlayer);
void ReloadServerSettings();
int GetArrayValueType(array aArray, int nIndex);
int GetDictionaryValueType(dictionary dDictionary, string sKey);
int LoadServerBoolean(string sTag, int nDefaultValue, string sDescription);
int LoadServerInt(string sTag, int nDefaultValue, int nMin, int nMax, string sDescription);
float LoadServerFloat(string sTag, float fDefaultValue, int nMin, int nMax, string sDescription);
string LoadServerString(string sTag, string sDefaultValue, string sDescription, int nType=SERVOPT_TYPE_TEXT);
int GetServerInt(string sTag);
float GetServerFloat(string sTag);
string GetServerString(string sTag);
void SetServerInt(string sTag, int nValue);
void SetServerFloat(string sTag, float fValue);
void SetServerString(string sTag, string sValue);
string GetEffectTag(effect e);
void SetEffectTag(effect e, string sTag);
array GetLocalVariablesOfTypeWithPrefix(object o, int nType, string sPrefix);
int DeleteLocalVariablesOfTypeWithPrefix(object o, int nType, string sPrefix);
int GetLocalVariableCount(object o);
array GetLocalVariableAtIndex(object o, int nIndex);
int HasLocalInt(object o, string sName);
int HasLocalString(object o, string sName);
int HasLocalFloat(object o, string sName);
int HasLocalObject(object o, string sName);
int HasLocalLocation(object o, string sName);
string GetTilesetInformation(string sResRef, string sSection, string sEntry);
int GetQuickButtonType(object oCreature, int nButtonPosition);
object GetQuickButtonItem1(object oCreature, int nButtonPosition);
object GetQuickButtonItem2(object oCreature, int nButtonPosition);
int GetQuickButtonClass(object oCreature, int nButtonPosition);
int GetQuickButtonMetaMagic(object oCreature, int nButtonPosition);
int GetQuickButtonSpellId(object oCreature, int nButtonPosition);
string GetQuickButtonCommand(object oCreature, int nButtonPosition);
string GetQuickButtonCommandLabel(object oCreature, int nButtonPosition);
string GetQuickButtonCreatorResRef(object oCreature, int nButtonPosition);
string GetQuickButtonCreatorLabel(object oCreature, int nButtonPosition);
int GetQuickButtonAssociateType(object oCreature, int nButtonPosition);
object GetQuickButtonAssociate(object oCreature, int nButtonPosition);
void SetQuickButton(object oCreature, int nButtonPosition, int nType, object oItem1, object oItem2, int nClass, int nMetaMagic, int nSpellId, string sCommand, string sCommandLabel, string sCreatorResRef, string sCreatorLabel, int nAssociateType, object oAssociate);
int PC_GetId(object oPC);
int PLAYER_GetId(object oPlayer);
int PC_Create(object oPC);
int PC_GetCurrentServer(object oPC);
location PC_GetSavedLocation(object oPC);
void PC_SetSavedLocation(object oPC, location lLocation);
void SQLGetInsertId();
int SQLGetLastResultCode();
int GetSurface(location lLocation);
int GetAnimation(object oTarget);
float GetAnimationSpeed(object oTarget);
int GetFlatFlooted(object oCreature);
int GetIsPolymorphed(object oCreature);
void _SetXPL_DontUse(int i);
int GetEventParamInt(int nParamIndex);
object GetEventParamObject(int nParamIndex);
string GetEventParamString(int nParamIndex);
float GetEventParamFloat(int nParamIndex);
effect GetEventParamEffect(int nParamIndex);
array GetEventParamArray(int nParamIndex);
dictionary GetEventParamDictionary(int nParamIndex);
location GetEventParamLocation(int nParamIndex);
vector GetEventParamVector(int nParamIndex);
array GetEventParams();
int GetEventParamType(int nParam);
int GetEventParamCount();
void BypassEvent();
void SetEventResultInt(int nResult);
void SetEventResultObject(object oResult);
void SetEventResultString(string sResult);
void SetEventResultFloat(float fResult);
void SetEventResultEffect(effect eResult);
void SetEventResultArray(array aResult);
void SetEventResultDictionary(dictionary dResult);
void SetEventResultVector(vector vResult);
void SetEventResultLocation(location lResult);
void RunEvent(string sScript, object oTarget, array aParams);
int RunEventInt(string sScript, object oTarget, array aParams);
object RunEventObject(string sScript, object oTarget, array aParams);
string RunEventString(string sScript, object oTarget, array aParams);
float RunEventFloat(string sScript, object oTarget, array aParams);
effect RunEventEffect(string sScript, object oTarget, array aParams);
array RunEventArray(string sScript, object oTarget, array aParams);
dictionary RunEventDictionary(string sScript, object oTarget, array aParams);
vector RunEventVector(string sScript, object oTarget, array aParams);
location RunEventLocation(string sScript, object oTarget, array aParams);
void AddArrayEffect(array aArray, effect eValue);
void SetArrayEffect(array aArray, int nIndex, effect eValue);
effect GetArrayEffect(array aArray, int nIndex);
void SetDictionaryEffect(dictionary dDictionary, string sKey, effect eValue);
effect GetDictionaryEffect(dictionary ddDictionary, string sKey);
int GetCurrentNodeType();
int GetCurrentNodeID();
int GetCurrentAbsoluteNodeID();
int GetSelectedNodeID();
int GetSelectedAbsoluteNodeID();
string GetSelectedNodeText(int nLangID = LANGUAGE_ENGLISH, int nGender = GENDER_MALE);
string GetCurrentNodeText(int nLangID = LANGUAGE_ENGLISH, int nGender = GENDER_MALE);
void SetCurrentNodeText(string sText, int nLangID = LANGUAGE_ENGLISH, int nGender = GENDER_MALE);
int GetKnowsFeat(object oCreature, int nFeat);
int GetDamageImmunity(object oObject, int nDamageType);
void SetAbilityScore(object oCreature, int nAbility, int nValue);
void ClosePlayerStore(object oPlayer);
void SetSkillRank(object oCreature, int nSkill, int nValue);
int GetACNaturalBase(object oCreature);
void SetACNaturalBase(object oCreature, int nValue);
void AddKnownFeat(object oCreature, int nFeat, int nLevel=-1);
void RemoveKnownFeat(object oCreature, int nFeat, int nLevel=-1);
int GetTotalKnownFeats(object oCreature, int nLevel=-1);
int GetKnownFeatByIndex(object oCreature, int nFeatIndex, int nLevel=-1);
int GetFeatRemainingUses(object oCreature, int nFeat);
int GetFeatTotalUses(object oCreature, int nFeat);
int GetIsClassBonusFeat(int nClass, int nFeat);
int GetIsClassGeneralFeat(int nClass, int nFeat);
int GetIsClassGrantedFeat(int nClass, int nFeat);
int GetIsClassSkill(int nClass, int nSkill);
int GetClassByLevel(object oCreature, int nLevel);
int GetAbilityIncreaseByLevel(object oCreature, int nLevel);
int GetSkillIncreaseByLevel(object oCreature, int nLevel, int nSkill);
int GetSavingThrowBonus(object oCreature, int nSave);
void SetSavingThrowBonus(object oCreature, int nSave, int nValue);
int GetMaxHitPointsByLevel(object oCreature, int nLevel);
void SetMaxHitPointsByLevel(object oCreature, int nLevel, int nVaule);
void SetCreatureSize(object oCreature, int nSize);
int GetPCSkillPoints(object oCreature);
void SetPCSkillPoints(object oCreature, int nValue);
int GetBodyBag(object oCreature);
void SetBodyBag(object oCreature, int nValue);
void SetAlignmentGoodEvil(object oCreature, int nValue);
void SetAlignmentLawChaos(object oCreature, int nValue);
void SetCurrentHitPoints(object oObject, int nHP);
void SetMaxHitPoints(object oObject, int nHP);
int GetKnowsSpell(object oCreature, int nSpell, int nClass=CLASS_TYPE_INVALID);
int GetKnownSpell(object oCreature, int nClass, int nSpellLevel, int nSpellIndex);
void SetKnownSpell(object oCreature, int nClass, int nSpellLevel, int nSpellIndex, int nSpellId);
int GetNumKnownSpells(object oCreature, int nClass, int nSpellLevel);
void AddKnownSpell(object oCreature, int nClass, int nSpellLevel, int nSpellId);
void RemoveKnownSpell(object oCreature, int nClass, int nSpellLevel, int nSpellId);
int GetMemorizedSpellCount(object oCreature, int nClass, int nSpellLevel);
int GetMemorizedSpellId(object oCreature, int nClass, int nSpellLevel, int nSpellIndex);
int GetMemorizedSpellReady(object oCreature, int nClass, int nSpellLevel, int nSpellIndex);
int GetMemorizedSpellMetaMagic(object oCreature, int nClass, int nSpellLevel, int nSpellIndex);
int GetMemorizedSpellDomain(object oCreature, int nClass, int nSpellLevel, int nSpellIndex);
void SetMemorizedSpellId(object oCreature, int nClass, int nSpellLevel, int nSpellIndex, int nSpellId);
void SetMemorizedSpellReady(object oCreature, int nClass, int nSpellLevel, int nSpellIndex, int bReady);
void SetMemorizedSpellMetaMagic(object oCreature, int nClass, int nSpellLevel, int nSpellIndex, int nMetaMagic);
void SetMemorizedSpellDomain(object oCreature, int nClass, int nSpellLevel, int nSpellIndex, int nDomain);
void SetMemorizedSpell(object oCreature, int nClass, int nSpellLevel, int nSpellIndex, int nSpellId, int bReady, int nMetaMagic, int nDomain);
int GetClericDomain(object oCreature, int nIndex);
void SetClericDomain(object oCreature, int nIndex, int nDomain);
int GetWizardSpecialization(object oCreature);
void SetWizardSpecialization(object oCreature, int nSchool);
int GetSpecialAbilityCount(object oCreature);
int GetSpecialAbilitySpellId(object oCreature, int nIndex);
int GetSpecialAbilityFlags(object oCreature, int nIndex);
int GetSpecialAbilityLevel(object oCreature, int nIndex);
void SetSpecialAbilitySpellId(object oCreature, int nIndex, int nSpellId);
void SetSpecialAbilityFlags(object oCreature, int nIndex, int nFlags);
void SetSpecialAbilityLevel(object oCreature, int nIndex, int nLevel);
void RemoveSpecialAbility(object oCreature, int nIndex);
void AddSpecialAbility(object oCreature, int nSpellId, int nFlags, int nLevel);
string GetPortrait(object oCreature);
void SetPortrait(object oCreature, string sPortraitResRef);
int GetSoundset(object oCreature);
void SetSoundset(object oCreature, int nSoundset);
void SetTrapCreator(object oTrap, object oCreator);
string GetConversation(object oCreature);
void SetConversation(object oCreature, string sConversation);
string GetLocalVariableName(object oObject, int nIndex);
int GetLocalVariableType(object oObject, int nIndex);
object GetFirstArea();
object GetNextArea();
void SetBaseItemType(object oItem, int nBaseItem);
void SetGoldPieceValue(object oItem, int nValue);
void SetItemWeight(object oItem, int nTenthLbs);
void SetPlaceableAppearance(object oPlaceable, int nAppearance);
float GetGroundHeight(object oArea, vector vPos);
float GetGroundHeightFromLocation(location lLoc);
int GetIsWalkable(object oArea, vector vPos);
int GetIsWalkableLocation(location lLoc);
int GetPCPort(object oPC);
void BootPCWithMessage(object oPC, int nStrRef);
string GetPCFileName(object oPC);
int GetFactionId(object oObject);
void SetFactionId(object oObject, int nFaction);
void SetLastHostileActor(object oObject, object oActor);
void SetMovementRate(object oCreature, int nRate);
void SetRacialType(object oCreature, int nRacialType);
object IntToObject(int nObjectId);
object StringToObject(string sObjectId);
int GetCriticalHitMultiplier(object oCreature, int bOffhand);
int GetCriticalHitRange(object oCreature, int bOffhand);
int GetCurrentAnimation(object oCreature);
void SetCurrentAnimation(object oCreature, int nAnimation);
int GetForcedWalk(object oCreature);
void SetForcedWalk(object oCreature, int bWalk);
void SetPlaceableHasInventory(object oPlaceable, int bHasInventory);
void ReloadERFs();
void ReloadCached2das();
void ReloadAll2das();
void PC_SetSavedLocationData(object oPC, string sLocation, int nServerId);
string VectorToString(vector v);
vector StringToVector(string s);
string LocationToString(location l);
location StringToLocation(string s);
string PC_GetSavedLocationString(object oPC);
int RunVariableEvent2(object oObject, string sEvent);
string GetCurrentVariableEvent2();
object GetCurrentVariableEventTarget2();
void BypassVariableEvent2();
void UnregisterVariableEvent2(object oObject, string sEvent, string sScript);
void RegisterVariableEvent2(object oObject, string sEvent, string sScript, int bNoByPass=FALSE);
void SendWebClientCommand(int nPlayerId, string sTag, string sParams, int nDuration=30, string sReason="MISC");
int GetPlayerServerRoles(object oPlayer);
int PC_GetPlayerOptions(object oPC);
int PC_GetPlayerOption(object oPC, int nOption);
void PC_SetPlayerOption(object oPC, int nOption, int bOn);
string GetPlayerOptionString(object oPC, string sGroup, string sName);
void SetPlayerOptionString(object oPC, string sGroup, string sName, string sValue);
int GetPersistentAreaId(object oArea);
string GetDatabaseName();
dbresult SQLCoreExec(string sSQL);
int SQLCoreAffectedRows();
void SQLCoreGetInsertId();
int GetCurrentScriptInCore();
int GetCurrentScriptPublic();
int GetCurrentScriptErfId();
int GetCurrentScriptServers();
int CRC32(string sValue);
string SHA256(string sValue);
string GetCorePCPublicCDKey(object oPC);
int HexToInt(string sHex);
string ByteToHex(int nInt);
string WordToHex(int nInt);
string IntToHex(int nInt);
int GetPlayerGameVersion(object oPlayer);
int GetPlayerGameLanguage(object oPlayer);
int GetPlayerExpansionPack(object oPlayer);